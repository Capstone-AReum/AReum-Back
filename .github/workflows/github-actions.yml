name : AReum-Server CI/CD Pipeline

on:
    push:
        branches: ["dev"]
    pull_request:
        branches: ["main", "dev"]

permissions:
    contents: read

jobs:
    build:
        name: Build
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v2
            
            - name: Setup docker buildx
              id: buildx
              uses: docker/setup-buildx-action@v1

            - name: Docker build and push
              run: |
                echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
                docker buildx build \
                --platform linux/amd64 \
                --no-cache \
                -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }} \
                --push .

    deploy:
        needs: build
        name: Deploy
        runs-on: ubuntu-latest
        steps:
            - name: Deploy to EC2
              uses: appleboy/ssh-action@master
              with:
                host: ${{ secrets.EC2_HOST }}
                username: ubuntu
                key: ${{ secrets.EC2_KEY }}
                port: 22
                script: |
                    sudo docker stop areum-server || true
                    sudo docker rm areum-server || true
                    sudo docker image rm ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }} || true
                    sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
                    sudo docker run -d \
                    --name areum-server \
                    -p 80:80 \
                    -e DB_URL=${{ secrets.DB_URL }} \
                    -e DB_USER=${{ secrets.DB_USERNAME }} \
                    -e DB_PASS=${{ secrets.DB_PASSWORD }} \
                    -e DB_PORT=${{ secrets.DB_PORT }} \
                    -e DB_NAME=${{ secrets.DB_NAME }} \
                    -e S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }} \
                    -e S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }} \
                    -e AWS_REGION=${{ secrets.S3_REGION }} \
                    -e S3_BUCKET=${{ secrets.S3_BUCKET_NAME }} \
                    -e STABILITY_API_KEY=${{ secrets.STABILITY_API_KEY }} \
                    -e PATH_CONVERT_VIDEO=${{ secrets.PATH_CONVERT_VIDEO }} \
                    -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest
                    sudo docker image prune -f